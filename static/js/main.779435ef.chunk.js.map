{"version":3,"sources":["components/SingleCell.js","components/TableRow.js","App.js","serviceWorker.js","index.js"],"names":["SingleCell","props","handleColor","setState","cellColor","myStates","color","handleMouseOver","isMouseDown","state","prevProps","prevState","this","isFilled","fillAll","isUnfilled","fillUncolored","style","backgroundColor","onClick","onMouseOver","React","Component","TableRow","cols","map","elem","App","addCol","addRow","rows","removeCol","removeRow","status","displayCols","numCols","arr","i","push","key","displayRow","numRows","fillAllCells","fillAllEmptyCells","className","tyep","onChange","event","target","value","id","onMouseDown","onMouseUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.779435ef.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SingleCell.css\";\n\nexport default class SingleCell extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cellColor: \"\"\n        };\n    }\n\n    handleColor = () => {\n        this.setState({ cellColor: this.props.myStates().color });\n    }\n\n    /**\n     * Handles the mousing over to change color of the component.\n     */\n\n    handleMouseOver= () => {\n\n        let isMouseDown = this.props.myStates().isMouseDown;\n\n        if(isMouseDown) {\n            this.setState({\n                cellColor: this.props.myStates().color\n            });\n        }\n    }\n\n    \n    /**\n     * Changes the state if the props change.\n     * Used for re-rendering the cells for the FillAllCells and FillAllEmptyCells\n     */\n    componentDidUpdate(prevProps, prevState) {\n\n        if(prevProps !== this.props) {\n            let myStates = this.props.myStates();\n\n            let isFilled = myStates.fillAll;\n            let isUnfilled = myStates.fillUncolored;\n    \n            if(isFilled || (isUnfilled && this.state.cellColor === \"\")) {\n                this.setState({\n                    cellColor: this.props.myStates().color\n                })\n            }\n    \n        }\n\n    }\n\n    render() {\n\n        return (\n            <td\n                style={{backgroundColor: this.state.cellColor}} \n                onClick={this.handleColor} \n                onMouseOver={this.handleMouseOver}\n            ></td>\n        );\n    }\n\n}\n","import React from \"react\";\nimport \"./SingleCell.css\";\n\nexport default function TableRow({cols}) {\n\n  return (\n    <tr>\n      {cols.map( (elem) => {\n        return elem\n      })}\n    </tr>\n  );\n}\n","import React from \"react\";\nimport {TableRow, SingleCell} from \"./components\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: 1,\n      rows: 1,\n      color: \"\",\n      fillAll: false,\n      fillUncolored: false,\n      isMouseDown: false\n    };\n  }\n\n  addCol = () => this.setState({ cols: this.state.cols + 1 });\n\n  addRow = () => this.setState({ rows: this.state.rows + 1 });\n\n  removeCol = () => this.setState({ cols: this.state.cols - 1 });\n\n  removeRow = () => this.setState({ rows: this.state.rows - 1 });\n\n  /**\n   * Gives child component access to parent state.\n   */\n\n  myStates = () => {\n\n    let status = this.state;\n\n    if(this.state.fillAll || this.state.fillUncolored) {\n        this.setState({\n            fillAll: false,\n            fillUncolored: false\n        });\n    }\n\n    return status;\n  }\n\n\n  /**\n   * Creates an array holding all SingleCells.\n   */\n\n  displayCols = () => {\n        \n    let numCols = this.state.cols;\n    let arr = [];\n    \n    for(let i = 0; i < numCols; i++) {\n        arr.push(<SingleCell key={i} myStates={this.myStates} />);\n    }\n\n    return arr;\n}\n\n\n    /**\n     * Creates an array holding all TableRows\n     */\n    displayRow = () => {\n\n        let numRows = this.state.rows;\n        let arr = [];\n\n        for(let i = 0; i < numRows; i++) {\n            arr.push(<TableRow key={i} cols = {this.displayCols()} />);\n        }\n\n        return arr;\n    }\n\n    fillAllCells = () => {\n        this.setState({\n            fillAll: true\n        })\n    }\n\n    fillAllEmptyCells = () => {\n        this.setState({\n            fillUncolored: true\n        })\n    }\n\n\n\n  render() {\n\n    let arr = this.displayRow();\n\n    return (\n\n      <div className=\"App\">\n        <button tyep=\"button\" onClick={this.addCol}>\n          Increment Col\n        </button>\n\n        <button tyep=\"button\" onClick={this.addRow}>\n          Increment Row\n        </button>\n\n        <button tyep=\"button\" onClick={this.removeCol}>\n          Decrement Col\n        </button>\n\n        <button tyep=\"button\" onClick={this.removeRow}>\n        Decrement Row\n        </button>\n\n        <button tyep=\"button\" onClick={this.fillAllCells}>\n            Fill All Cells\n        </button>\n\n        <button tyep=\"button\" onClick={this.fillAllEmptyCells}>\n            Fill All Empty Cells\n        </button>\n\n        <select onChange={ (event) => {this.setState({color: event.target.value})}}>\n            <option value=\"white\">White</option>\n            <option value=\"green\">Green</option>\n            <option value=\"red\">Red</option>\n            <option value=\"purple\">Purple</option>\n        </select>\n\n        <table id=\"main-grid\" \n            onMouseDown={ () => this.setState({isMouseDown: true})}\n            onMouseUp={ () => this.setState({isMouseDown: false})}>\n            <tbody>\n                {arr.map( (elem) => {\n                    return elem;\n                })}\n            </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}